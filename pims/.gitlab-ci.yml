stages:
  - prepare
  - test
  - build
  - publish

# variable to register in project:
# - DOCKERHUB_URL: url of dockerhub (e.g. docker.io)
# - DOCKERHUB_USER: cytomine username on dockerhub
# - DOCKERHUB_PASSWORD: cytomine password on dockerhub
# - PYPI_USERNAME: pypi username for package upload
# - PYPI_PASSWORD: pypi password for package upload

default:
  tags:
    - docker

variables:
  DOCKERHUB_PIMS_REPO: cytomine/pims
  DOCKER_IMAGE_TESTS: "${CI_REGISTRY_IMAGE}:ci-${CI_PIPELINE_IID}"
  ENTRYPOINT_SCRIPTS_VERSION: '1.4.0'
  GUNICORN_VERSION: '22.0.0'
  OPENJPEG_URL: 'https://github.com/uclouvain/openjpeg/archive'
  OPENJPEG_VERSION: '2.5.2'
  PLUGIN_CSV: 'scripts/plugin-list.csv'
  PY_VERSION: "3.8"
  SETUPTOOLS_VERSION: '59.6.0'
  UBUNTU_VERSION: '20.04'
  VIPS_URL: 'https://github.com/libvips/libvips/releases/download'
  VIPS_VERSION: '8.15.2'
  PEP440_VERSION_FULL_REGEX: /^v?((?:[0-9]+!)?[0-9]+(?:\.[0-9]+)*(?:[-_\.]?(?:a|b|c|rc|alpha|beta|pre|preview)[-_\.]?(?:[0-9]+)?)?(?:-[0-9]+|[-_\.]?(?:post|rev|r)[-_\.]?(?:[0-9]+)?)?(?:[-_\.]?dev[-_\.]?(?:[0-9]+)?)?)(?:\+[a-z0-9]+(?:[-_\.][a-z0-9]+)*)?${/}
  PEP440_VERSION_RC_REGEX: /^v?(?:[0-9]+!)?[0-9]+(?:\.[0-9]+)*$/


# build docker image for test
build-docker-image-for-tests:
  stage: prepare
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:latest
  script:
    - echo "Log in to Gitlab docker registry"
    - mkdir -p ~/.docker
    - echo ${DOCKER_AUTH_CONFIG} > ~/.docker/config.json

    - echo "Build the docker image ${DOCKER_IMAGE_TESTS}"
    - |
      docker build \
        --build-arg ENTRYPOINT_SCRIPTS_VERSION=${ENTRYPOINT_SCRIPTS_VERSION} \
        --build-arg GUNICORN_VERSION=${GUNICORN_VERSION} \
        --build-arg OPENJPEG_URL=${OPENJPEG_URL} \
        --build-arg OPENJPEG_VERSION=${OPENJPEG_VERSION} \
        --build-arg PLUGIN_CSV="scripts/plugin-list.csv" \
        --build-arg PY_VERSION=${PY_VERSION} \
        --build-arg SETUPTOOLS_VERSION=${SETUPTOOLS_VERSION} \
        --build-arg UBUNTU_VERSION=${UBUNTU_VERSION} \
        --build-arg VIPS_URL=${VIPS_URL} \
        --build-arg VIPS_VERSION=${VIPS_VERSION} \
        -t ${DOCKER_IMAGE_TESTS} \
        -f docker/backend.dockerfile \
        .

    - echo "Pushing docker image ${DOCKER_IMAGE_TESTS}"
    - docker push ${DOCKER_IMAGE_TESTS}
    - echo "Successfully pushed docker image ${DOCKER_IMAGE_TESTS}"

unittest:
  stage: test
  image:
    name: ${DOCKER_IMAGE_TESTS}
    entrypoint: [""]
    pull_policy: if-not-present
  needs:
    - job: build-docker-image-for-tests
      artifacts: false
  script:
    - pip install pytest httpx
    - pytest ./tests --junit-xml=ci/test-reports/pytest_unit.xml
  artifacts:
    reports:
      junit: ci/test-reports/pytest_unit.xml

build-python-package:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:${PY_VERSION}-slim-bullseye
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - sed -i -- "s/__version__ = \"0.0.0\"/__version__ = \"${CI_COMMIT_TAG}\"/g" pims/__version__.py
    - python setup.py sdist
    # Canonical version is automatically generated by setuptools matching PEP440
    - DIST_FILENAME=$(ls dist/cytomine-pims-*.tar.gz)
    - |
      if [ ! -f "${DIST_FILENAME}" ]; then
        echo "could not build the package, ${DIST_FILENAME} seems to be missing"
        exit -1
      fi
    - VERSION=$(python -c 'import re; import sys; m = re.match(r"^dist/cytomine-pims-(.+)\.tar\.gz$", sys.argv[1].strip()); print(m.group(1))' ${DIST_FILENAME})
    - echo "CANONICAL_VERSION_NUMBER=${VERSION}" > .env
  artifacts:
    paths:
      - dist/cytomine-pims-*.tar.gz
    reports:
      # to export canonical version number
      dotenv: .env

publish-python-package:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:${PY_VERSION}-slim-bullseye
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ $PEP440_VERSION_FULL_REGEX
  needs:
    - job: build-python-package
      artifacts: true
  script:
    - pip install twine
    - |
      if [ ${CI_COMMIT_TAG} ~= ${PEP440_VERSION_RC_REGEX} ]; then
        export TARGET_PYTHON_REPO=https://upload.pypi.org/legacy/
        export TWINE_USERNAME=${PYPI_USERNAME}
        export TWINE_PASSWORD=${PYPI_PASSWORD}
      else
        export TARGET_PYTHON_REPO=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
        export TWINE_USERNAME=gitlab-ci-token
        export TWINE_PASSWORD=${CI_JOB_TOKEN}
      fi
    - twine upload dist/cytomine-pims-*.tar.gz --repository-url ${TARGET_PYTHON_REPO}
