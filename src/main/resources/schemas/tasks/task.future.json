{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "required": [
    "$schema", 
    "name", 
    "name_short",
    "version",
    "license", 
    "license_file", 
    "authors",
    "configuration",
    "inputs",
    "outputs"
  ],
  "type": "object",
  "properties": {
    "$schema": {},
    "name": {
      "type": "string",
      "minLength": 3,
      "maxLength": 30,
      "pattern": "^[a-zA-Z0-9_\\s\\-]+$"
    },
    "name_short": {
      "type": "string",
      "minLength": 3,
      "maxLength": 10,
      "pattern": "^[a-zA-Z0-9_\\s\\-]+$"
    },
    "version": {
      "$ref": "#/$defs/types/semver"
    },
    "identifier": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]+)+$"
    },
    "description": {
      "type": "string",
      "default": "",
      "maxLength": 2048
    },
    "description_file": {
      "type": "uri"
    },
    "license": {
      "type": "string"
    },
    "license_file": {
      "type": "uri"
    },
    "metadata": {
      "type": "object",
      "additionalProperties": { "type": ["string", "number", "boolean"] }
    },
    "authors": {
      "type": "array",
      "minLength": 1,
      "items": {
        "type": "object",
        "properties": {
          "$ref": "#/$defs/contact"
        }
      }
    },
    "external": {
      "type": "object",
      "properties": {
        "source_code": {
          "type": "string",
          "format": "uri"
        },
        "doi": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        }
      }
    },
    "configuration": {
      "type": "object",
      "required": ["image"],
      "properties": {
        "image": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "regex": "^(?:(?=[^:/]{4,253})(?!-)[a-zA-Z0-9-]{1,63}(?<!-)(?:\\.(?!-)[a-zA-Z0-9-]{1,63}(?<!-))*(?::[0-9]{1,5})?/)?((?![._-])(?:[a-z0-9._-]*)(?<![._-])(?:\/(?![._-])[a-z0-9._-]*(?<![._-]))*)(?::(?![.-])[a-zA-Z0-9_.-]{1,128})?$"
            },
            "type": {
              "type": "string",
              "enum": ["docker"],
              "default": "docker"
            },
            "entrypoint": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "input_folder": {
          "$ref": "#/$defs/types/path",
          "default": "/inputs"
        },
        "output_folder": {
          "$ref": "#/$defs/types/path",
          "default": "/outputs"
        },
        "resources": {
          "type": "object",
          "ram": {
            "$ref": "#/$defs/types/memory",
            "default": "1GiB"
          },
          "vram": {
            "$ref": "#/$defs/types/memory",
            "default": "8GiB"
          },
          "gpu": {
            "type": "integer",
            "default": 0
          },
          "cores": {
            "type": "integer",
            "default": 1
          },
          "threads": {
            "type": "integer",
            "default": 1
          },
          "internet": {
            "type": "bool",
            "default": false
          }
        }
      }
    },
    "inputs": {
      "patternProperties": {
        "^[a-zA-Z0-9_]+$": {
          "$ref": "#/$defs/io/input_parameter"
        }
      },
      "additionalProperties": false
    },
    "outputs": {
      "patternProperties": {
        "^[a-zA-Z0-9_]+$": {
          "$ref": "#/$defs/io/output_parameter"
        }
      },
      "additionalProperties": false
    }
  },
  "$defs": {
    "types": {
      "semver":  {
        "type": "string",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      },
      "path": {
        "type": "string",
        "pattern": "^\/.*$"
      },
      "memory": {
        "type": "string",
        "pattern": "^(?:0|[1-9]\\d*)(?:\\.\\d+)?\\s*(?:(?:[KMGTPEZY]i?)?B|(?:[kmgtpezy]i?)?b)?$"
      }
    },
    "contact": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "is_contact": {
          "type": "bool"
        }
      }
    },
    "io": {
      "parameter": {
        "description": {
          "type": "string"
        },
        "optional": {
          "type": "bool",
          "default": false
        }
      },
      "base_parameter": {
        "type": "object",
        "required": ["description"],
        "properties": {
          "display_name": {
            "type": "string",
            "minLength": "1"
          },
          "optional": {"$ref": "#/$defs/io/parameter/optional"},
          "description": {"$ref": "#/$defs/io/parameter/description"},
          "provision": {
            "$ref": "#/$defs/provisioning/specification"
          }
        }
      },
      "type_specs": {
        "bool": {
          "oneOf": [
            {
              "const": "bool"
            },
            {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {"const": "bool"}
              }
            }
          ]
        },
        "integer": {
          "oneOf": [
            {
              "const": "integer"
            },
            {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {"const": "integer"},
                "$comment": "TODO add validation rules for range validators",
                "gt": {"type": "integer"},
                "lt": {"type": "integer"},
                "geq": {"type": "integer"},
                "leq": {"type": "integer"}
              }
            }
          ]
        },
        "float": {
          "oneOf": [
            {
              "const": "float"
            },
            {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {"const": "float"},
                "$comment": "TODO add validation rules for range validators",
                "gt": {"type": "number"},
                "lt": {"type": "number"},
                "geq": {"type": "number"},
                "leq": {"type": "number"}
              }
            }
          ]
        },
        "string": {
          "oneOf": [
            {
              "const": "string"
            },
            {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {"const": "string"},
                "$comment": "TODO add validation rules for range validators",
                "max_length": {"type": "integer"},
                "min_length": {"type": "integer", "default": 0},
                "regex": {"type": "string", "format": "regex"}
              }
            }
          ]
        },
        "datetime": {
          "oneOf": [
            {
              "const": "datetime"
            },
            {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {"const": "datetime"},
                "$comment": "TODO add validation rules for range validators",
                "gt": {"type": "string", "format": "date-time"},
                "lt": {"type": "string", "format": "date-time"},
                "geq": {"type": "string", "format": "date-time"},
                "leq": {"type": "string", "format": "date-time"}
              }
            }
          ]
        },
        "enum": { 
          "type": "object",
          "required": ["id", "choices"],
          "properties": {
            "id": {"const": "enum"},
            "$comment": "TODO add validation rules for range validators",
            "choices":  { 
              "type": "array", 
              "items": {
                "type": "string"
              }
            }
          }
        },
        "list": {
          "type": "object",
          "required": ["id", "subtypes"],
          "properties": {
            "id": {"const": "list"},
            "subtypes": {
              "type": "object",
              "required": ["items"],
              "properties": {
                "items": {
                  "oneOf": [
                    {"$ref": "#/$defs/io/type_specs/bool"},
                    {"$ref": "#/$defs/io/type_specs/integer"},
                    {"$ref": "#/$defs/io/type_specs/float"},
                    {"$ref": "#/$defs/io/type_specs/string"},
                    {"$ref": "#/$defs/io/type_specs/datetime"},
                    {"$ref": "#/$defs/io/type_specs/enum"},
                    {"$ref": "#/$defs/io/type_specs/list"}
                  ]
                }
              }
            },
            "$comment": "TODO enforce min < max",
            "min_length": {"type": "integer", "default": 0},
            "max_length": {"type": "integer"}
          }
        }
      },
      "typed_parameter": {
        "bool": {
          "allOf": [
            {"$ref": "#/$defs/io/base_parameter"}
          ],
          "required": ["type"],
          "properties": {
            "type": {"$ref": "#/$defs/io/type_specs/bool"},
            "default": {"type": "bool"}
          },
          "unevaluatedProperties": false
        },
        "integer": {
          "allOf": [
            {"$ref": "#/$defs/io/base_parameter"}
          ],
          "required": ["type"],
          "properties": {
            "type": {"$ref": "#/$defs/io/type_specs/integer"},
            "default": {"type": "integer"}
          },
          "unevaluatedProperties": false
        },
        "float": {
          "allOf": [
            {"$ref": "#/$defs/io/base_parameter"}
          ],
          "required": ["type"],
          "properties": {
            "type": {"$ref": "#/$defs/io/type_specs/float"},
            "default": {"type": "number"}
          },
          "unevaluatedProperties": false
        },
        "string": {
          "allOf": [
            {"$ref": "#/$defs/io/base_parameter"}
          ],
          "required": ["type"],
          "properties": {
            "type": {"$ref": "#/$defs/io/type_specs/string"},
            "default": {"type": "string"}
          },
          "unevaluatedProperties": false
        },
        "datetime": {
          "allOf": [
            {"$ref": "#/$defs/io/base_parameter"}
          ],
          "required": ["type"],
          "properties": {
            "type": {"$ref": "#/$defs/io/type_specs/datetime"},
            "default": { "type": "string", "format": "date-time" }
          },
          "unevaluatedProperties": false
        },
        "enum": {
          "allOf": [
            {"$ref": "#/$defs/io/base_parameter"}
          ],
          "required": ["type"],
          "properties": {
            "type": {"$ref": "#/$defs/io/type_specs/enum"},
            "default": {"type": "string"}
          },
          "unevaluatedProperties": false
        },
        "list": {
          "allOf": [
            {"$ref": "#/$defs/io/base_parameter"}
          ],
          "required": ["type"],
          "properties": {
            "type": {"$ref": "#/$defs/io/type_specs/list"}
          },
          "unevaluatedProperties": false
        }
      },
      "input_parameter": {
        "oneOf": [
          {"$ref": "#/$defs/io/typed_parameter/bool"},
          {"$ref": "#/$defs/io/typed_parameter/integer"},
          {"$ref": "#/$defs/io/typed_parameter/float"},
          {"$ref": "#/$defs/io/typed_parameter/string"},
          {"$ref": "#/$defs/io/typed_parameter/datetime"},
          {"$ref": "#/$defs/io/typed_parameter/enum"},
          {"$ref": "#/$defs/io/typed_parameter/list"}
        ]
      },
      "output_parameter": {
        "oneOf": [
          {"$ref": "#/$defs/io/typed_parameter/bool"},
          {"$ref": "#/$defs/io/typed_parameter/integer"},
          {"$ref": "#/$defs/io/typed_parameter/float"},
          {"$ref": "#/$defs/io/typed_parameter/string"},
          {"$ref": "#/$defs/io/typed_parameter/datetime"},
          {"$ref": "#/$defs/io/typed_parameter/enum"},
          {"$ref": "#/$defs/io/typed_parameter/list"}
        ]
      }
    },
    "provisioning": { 
      "specification": {
        "type": "object",
        "required": ["strategy"],
        "properties": {
          "strategy": {
            "enum": ["file", "env", "cli"],
            "default": "file"
          }
        }
      }
    }
  }
}
